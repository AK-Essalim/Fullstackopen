{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Skynet/Desktop/Programming/fullstack2020/part1/unicafe/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst Statistics = props => {\n  const {\n    good,\n    neutral,\n    bad\n  } = props;\n\n  if (good + bad + neutral === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(StatisticLine, {\n            text: \"good\",\n            value: good\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"neutral\",\n          value: neutral\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"bad\",\n          value: bad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"all\",\n          value: good + neutral + bad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"average\",\n          value: (good * 1 + neutral * 0 + bad * -1) / (good + bad + neutral)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"positive\",\n          value: good / (good + neutral + bad) * 100,\n          end: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Statistics;\n\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleClick,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n};\n\n_c2 = Button;\n\nconst StatisticLine = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [props.value, \" \", props.end]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c3 = StatisticLine;\n\nconst App = () => {\n  _s();\n\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const increaseGood = () => setGood(good + 1);\n\n  const increaseNeutral = () => setNeutral(neutral + 1);\n\n  const increaseBad = () => setBad(bad + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"good\",\n      handleClick: () => increaseGood()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"neutral\",\n      handleClick: () => increaseNeutral()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"bad\",\n      handleClick: () => increaseBad()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      bad: bad,\n      neutral: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"StatisticLine\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/Skynet/Desktop/Programming/fullstack2020/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistics","props","good","neutral","bad","Button","handleClick","text","StatisticLine","value","end","App","setGood","setNeutral","setBad","increaseGood","increaseNeutral","increaseBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst Statistics = (props) => {\n  const { good, neutral, bad } = props;\n  if (good + bad + neutral === 0) {\n    return <div>No feedback given</div>;\n  }\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      <table>\n        <tbody>\n          <tr>\n            <StatisticLine text=\"good\" value={good} />\n          </tr>\n          <StatisticLine text=\"neutral\" value={neutral} />\n          <StatisticLine text=\"bad\" value={bad} />\n          <StatisticLine text=\"all\" value={good + neutral + bad} />\n          <StatisticLine\n            text=\"average\"\n            value={(good * 1 + neutral * 0 + bad * -1) / (good + bad + neutral)}\n          />\n          <StatisticLine\n            text=\"positive\"\n            value={(good / (good + neutral + bad)) * 100}\n            end=\"%\"\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst Button = (props) => {\n  return <button onClick={props.handleClick}>{props.text}</button>;\n};\nconst StatisticLine = (props) => {\n  return (\n    <>\n      <td>{props.text}</td>{\" \"}\n      <td>\n        {props.value} {props.end}\n      </td>\n    </>\n  );\n};\nconst App = () => {\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const increaseGood = () => setGood(good + 1);\n  const increaseNeutral = () => setNeutral(neutral + 1);\n  const increaseBad = () => setBad(bad + 1);\n\n  return (\n    <div>\n      <h1>Give feedback</h1>\n      <Button text=\"good\" handleClick={() => increaseGood()} />\n      <Button text=\"neutral\" handleClick={() => increaseNeutral()} />\n      <Button text=\"bad\" handleClick={() => increaseBad()} />\n\n      <br />\n      <br />\n      <Statistics good={good} bad={bad} neutral={neutral} />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}